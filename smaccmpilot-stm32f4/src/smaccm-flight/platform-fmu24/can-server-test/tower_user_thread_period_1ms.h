/* This file has been autogenerated by Ivory
 * Compiler version  0.1.0.5
 */
#ifndef __TOWER_USER_THREAD_PERIOD_1MS_H__
#define __TOWER_USER_THREAD_PERIOD_1MS_H__
#ifdef __cplusplus
extern "C" {
#endif
#include "ivory.h"
#include "canDriverTypes.h"
#include "heartbeat_types.h"
#include "time_micros_types.h"
#include "arming_mode_types.h"
#include "sequence_numbered_packed_status_types.h"
#include "sequence_num_types.h"
#include "packed_status_types.h"
#include "gps_fix_types.h"
#include "tristate_types.h"
#include "control_modes_types.h"
#include "control_source_types.h"
#include "yaw_mode_types.h"
#include "throttle_mode_types.h"
#include "sequence_numbered_control_law_types.h"
#include "control_law_types.h"
#include "sequence_numbered_rc_input_types.h"
#include "rc_input_types.h"
#include "sequence_numbered_user_input_result_types.h"
#include "user_input_result_types.h"
#include "user_input_types.h"
#include "sequence_numbered_sensors_result_types.h"
#include "sensors_result_types.h"
#include "xyz_types.h"
#include "quaternion_types.h"
#include "sequence_numbered_gyroscope_sample_types.h"
#include "gyroscope_sample_types.h"
#include "sequence_numbered_accelerometer_sample_types.h"
#include "accelerometer_sample_types.h"
#include "sequence_numbered_barometer_sample_types.h"
#include "barometer_sample_types.h"
#include "sequence_numbered_lidarlite_sample_types.h"
#include "lidarlite_sample_types.h"
#include "sequence_numbered_magnetometer_sample_types.h"
#include "magnetometer_sample_types.h"
#include "sequence_numbered_px4flow_integral_sample_types.h"
#include "px4flow_integral_sample_types.h"
#include "sequence_numbered_px4flow_sample_types.h"
#include "px4flow_sample_types.h"
#include "sequence_numbered_position_sample_types.h"
#include "position_sample_types.h"
#include "sequence_numbered_control_setpoint_types.h"
#include "control_setpoint_types.h"
#include "sequence_numbered_control_output_types.h"
#include "control_output_types.h"
#include "sequence_numbered_quadcopter_motors_types.h"
#include "quadcopter_motors_types.h"
#include "sequence_numbered_att_control_debug_types.h"
#include "att_control_debug_types.h"
#include "pid_state_types.h"
#include "sequence_numbered_alt_control_debug_types.h"
#include "alt_control_debug_types.h"
#include "sequence_numbered_px4io_state_types.h"
#include "px4io_state_types.h"
#include "px4io_status_types.h"
#include "px4io_alarms_types.h"
#include "sequence_numbered_arming_status_types.h"
#include "arming_status_types.h"
#include "sequence_numbered_float_types.h"
#include "sequence_numbered_pid_config_types.h"
#include "pid_config_types.h"
#include "sequence_numbered_throttle_ui_types.h"
#include "throttle_ui_types.h"
#include "sequence_numbered_stab_config_types.h"
#include "stab_config_types.h"
#include "sequence_numbered_tristate_types.h"
#include "sequence_numbered_control_modes_types.h"
#include "sequence_numbered_user_input_types.h"
#include "sequence_numbered_rgb_led_setting_types.h"
#include "rgb_led_setting_types.h"
#include "sequence_numbered_camera_target_types.h"
#include "camera_target_types.h"
#include "sequence_numbered_reboot_req_types.h"
#include "reboot_req_types.h"
#include "reboot_magic_types.h"
#include "ivory_serialize.h"
#include "gps_common.h"
#include "spiDriverTypes.h"
#include "mpu6000_response_types.h"
#include "ms5611_types.h"
#include "i2cTowerTypes.h"
#include "attitude_filter.h"
#include "tower_state_monitor_frameBuffer.h"
#include "tower_state_monitor_fragment_reassembly.h"
#include "tower_state_monitor_controllableVehicleConsumerOutput.h"
#include "tower_state_monitor_reboot_req_attrServer.h"
#include "tower_state_monitor_controllableVehicleProducerInput.h"
#include "tower_state_monitor_fragment_blindly_0x100.h"
#include "tower_state_monitor_fragment_0x100.h"
#include "tower_state_monitor_can1PeripheralDriver.h"
#include "tower_state_monitor_nominal_throttle_attrServer.h"
#include "tower_state_monitor_altitude_rate_pid_attrServer.h"
#include "tower_state_monitor_altitude_position_pid_attrServer.h"
#include "tower_state_monitor_throttle_ui_attrServer.h"
#include "tower_state_monitor_attitude_roll_stab_attrServer.h"
#include "tower_state_monitor_attitude_pitch_stab_attrServer.h"
#include "tower_state_monitor_yaw_rate_pid_attrServer.h"
#include "tower_state_monitor_yaw_position_pid_attrServer.h"
#include "tower_state_monitor_arming_request_attrServer.h"
#include "tower_state_monitor_control_modes_request_attrServer.h"
#include "tower_state_monitor_user_input_request_attrServer.h"
#include "tower_state_monitor_rgb_led_attrServer.h"
#include "tower_state_monitor_rgbled.h"
#include "tower_state_monitor_i2c2PeripheralDriver.h"
#include "tower_state_monitor_camera_target_input_attrServer.h"
#include "tower_state_monitor_packed_status_attrServer.h"
#include "tower_state_monitor_control_law_attrServer.h"
#include "tower_state_monitor_rc_input_attrServer.h"
#include "tower_state_monitor_user_input_attrServer.h"
#include "tower_state_monitor_sensors_output_attrServer.h"
#include "tower_state_monitor_gyro_output_attrServer.h"
#include "tower_state_monitor_accel_output_attrServer.h"
#include "tower_state_monitor_baro_output_attrServer.h"
#include "tower_state_monitor_lidarlite_output_attrServer.h"
#include "tower_state_monitor_mag_output_attrServer.h"
#include "tower_state_monitor_px4flow_int_output_attrServer.h"
#include "tower_state_monitor_px4flow_output_attrServer.h"
#include "tower_state_monitor_gps_output_attrServer.h"
#include "tower_state_monitor_control_setpoint_attrServer.h"
#include "tower_state_monitor_control_output_attrServer.h"
#include "tower_state_monitor_motor_output_attrServer.h"
#include "tower_state_monitor_att_control_debug_attrServer.h"
#include "tower_state_monitor_alt_control_debug_attrServer.h"
#include "tower_state_monitor_px4io_state_attrServer.h"
#include "tower_state_monitor_arming_status_attrServer.h"
#include "tower_state_monitor_battery_voltage_attrServer.h"
#include "tower_state_monitor_spi1PeripheralDriver.h"
#include "tower_state_monitor_spi1_scheduler.h"
#include "tower_state_monitor_mpu6kCtl.h"
#include "tower_state_monitor_detectMotion.h"
#include "tower_state_monitor_gyro_output_attrProxy.h"
#include "tower_state_monitor_att_est_sensor_fusion.h"
#include "tower_state_monitor_sensor_fusion_proxy.h"
#include "tower_state_monitor_motion_light_debug.h"
#include "tower_state_monitor_accel_output_attrProxy.h"
#include "tower_state_monitor_lsm303dSensorManager.h"
#include "tower_state_monitor_mag_output_attrProxy.h"
#include "tower_state_monitor_ms5611SPISensorManager.h"
#include "tower_state_monitor_baro_output_attrProxy.h"
#include "tower_state_monitor_l3gd20Ctl.h"
#include "tower_state_monitor_i2c1PeripheralDriver.h"
#include "tower_state_monitor_lidarlite_sensor_manager.h"
#include "tower_state_monitor_i2c1_schedulerasync.h"
#include "tower_state_monitor_lidarlite_output_attrProxy.h"
#include "tower_state_monitor_px4flow_sensor_manager.h"
#include "tower_state_monitor_px4flow_output_attrProxy.h"
#include "tower_gen_thread_period_1ms.h"
#include "tower_time.h"
void callback_i2c_response_thread_period_1ms(const struct i2c_transaction_result *n_var0);
void callback_set_thread_period_1ms(const struct rgb_led_setting *n_var0);
void callback_init_3_thread_period_1ms(const int64_t *n_var0);
void callback_i2c2_request_thread_period_1ms(const struct i2c_transaction_request *n_var0);
void callback_i2c2_ready_period_thread_period_1ms(const int64_t *n_var0);
void callback_new_state_thread_period_1ms(const struct AhrsMlkf *n_var0);
void callback_save_last_lidar_thread_period_1ms(const struct lidarlite_sample *n_var0);
void callback_save_last_gyro_thread_period_1ms(const struct gyroscope_sample *n_var0);
void callback_save_last_baro_thread_period_1ms(const struct barometer_sample *n_var0);
void callback_save_last_mag_thread_period_1ms(const struct magnetometer_sample *n_var0);
void callback_save_last_accel_thread_period_1ms(const struct accelerometer_sample *n_var0);
void callback_att_est_motion_thread_period_1ms(const bool *n_var0);
void callback_att_est_gyro_thread_period_1ms(const struct gyroscope_sample *n_var0);
void callback_att_est_mag_thread_period_1ms(const struct magnetometer_sample *n_var0);
void callback_att_est_accel_thread_period_1ms(const struct accelerometer_sample *n_var0);
void callback_write_mag_output_attr_thread_period_1ms(const struct magnetometer_sample *n_var0);
void callback_write_gyro_output_attr_thread_period_1ms(const struct gyroscope_sample *n_var0);
void callback_write_baro_output_attr_thread_period_1ms(const struct barometer_sample *n_var0);
void callback_write_px4flow_output_attr_thread_period_1ms(const struct px4flow_sample *n_var0);
void callback_write_lidarlite_output_attr_thread_period_1ms(const struct lidarlite_sample *n_var0);
void callback_write_accel_output_attr_thread_period_1ms(const struct accelerometer_sample *n_var0);
void callback_motion_light_debug_2_thread_period_1ms(const bool *n_var0);
void callback_detectMotion_2_accel_thread_period_1ms(const struct accelerometer_sample *n_var0);
void callback_detectMotion_2_gyro_thread_period_1ms(const struct gyroscope_sample *n_var0);
void callback_i2c1_schedulerasync_reschedule_thread_period_1ms(const int64_t *n_var0);
void callback_i2c1_schedulerasync_response_thread_period_1ms(const struct i2c_transaction_result *n_var0);
void callback_i2c1_schedulerasync_ready_thread_period_1ms(const int64_t *n_var0);
void callback_i2c1_schedulerasync_px4flow_thread_period_1ms(const struct i2c_transaction_request *n_var0);
void callback_i2c1_schedulerasync_lidarlite_thread_period_1ms(const struct i2c_transaction_request *n_var0);
void callback_px4flow_ready_thread_period_1ms(const int64_t *n_var0);
void callback_px4flow_coroutine_raw_thread_period_1ms(const struct i2c_transaction_result *n_var0);
void callback_px4flow_coroutine_init_thread_period_1ms(const int64_t *n_var0);
void callback_px4flow_coroutine_thread_period_1ms(const bool *n_var0);
void callback_lidarlite_ready_thread_period_1ms(const int64_t *n_var0);
void callback_lidarlite_coroutine_raw_thread_period_1ms(const struct i2c_transaction_result *n_var0);
void callback_lidarlite_coroutine_init_thread_period_1ms(const int64_t *n_var0);
void callback_lidarlite_coroutine_thread_period_1ms(const bool *n_var0);
void callback_i2c1_request_thread_period_1ms(const struct i2c_transaction_request *n_var0);
void callback_i2c1_ready_period_thread_period_1ms(const int64_t *n_var0);
void callback_spi1_scheduler_response_thread_period_1ms(const struct spi_transaction_result *n_var0);
void callback_spi1_scheduler_l3gd20_thread_period_1ms(const struct spi_transaction_request *n_var0);
void callback_spi1_scheduler_ms5611_thread_period_1ms(const struct spi_transaction_request *n_var0);
void callback_spi1_scheduler_lsm303d_thread_period_1ms(const struct spi_transaction_request *n_var0);
void callback_spi1_scheduler_mpu6000_thread_period_1ms(const struct spi_transaction_request *n_var0);
void callback_ms5611_raw_thread_period_1ms(const struct spi_transaction_result *n_var0);
void callback_ms5611_init_thread_period_1ms(const int64_t *n_var0);
void callback_ms5611_thread_period_1ms(const bool *n_var0);
void callback_lsm303d_coroutine_raw_thread_period_1ms(const struct spi_transaction_result *n_var0);
void callback_lsm303d_coroutine_init_thread_period_1ms(const int64_t *n_var0);
void callback_lsm303d_coroutine_thread_period_1ms(const bool *n_var0);
void callback_mpu6000_raw_thread_period_1ms(const struct spi_transaction_result *n_var0);
void callback_mpu6000_init_thread_period_1ms(const int64_t *n_var0);
void callback_mpu6000_thread_period_1ms(const bool *n_var0);
void callback_l3gd20_raw_thread_period_1ms(const struct spi_transaction_result *n_var0);
void callback_l3gd20_thread_period_1ms(const bool *n_var0);
void callback_request_4_thread_period_1ms(const struct spi_transaction_request *n_var0);
void callback_spi_shutdown_watchdog_thread_period_1ms(const int64_t *n_var0);
void callback_new_msg_thread_period_1ms(const uint8_t n_var0[80U]);
void callback_fragment_abort_0x100_thread_period_1ms(const bool *n_var0);
void callback_fragment_req_0x100_thread_period_1ms(const uint8_t n_var0[80U]);
void callback_receive_msg_thread_period_1ms(const struct can_message *n_var0);
void callback_periodic_pop_thread_period_1ms(const int64_t *n_var0);
void callback_batteryVoltageGetRespProducer_thread_period_1ms(const struct sequence_numbered_float *n_var0);
void callback_armingStatusGetRespProducer_thread_period_1ms(const struct sequence_numbered_arming_status *n_var0);
void callback_px4ioStateGetRespProducer_thread_period_1ms(const struct sequence_numbered_px4io_state *n_var0);
void callback_altControlDebugGetRespProducer_thread_period_1ms(const struct sequence_numbered_alt_control_debug *n_var0);
void callback_attControlDebugGetRespProducer_thread_period_1ms(const struct sequence_numbered_att_control_debug *n_var0);
void callback_motorOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_quadcopter_motors *n_var0);
void callback_controlOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_control_output *n_var0);
void callback_controlSetpointGetRespProducer_thread_period_1ms(const struct sequence_numbered_control_setpoint *n_var0);
void callback_gpsOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_position_sample *n_var0);
void callback_px4flowOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_px4flow_sample *n_var0);
void callback_px4flowIntOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_px4flow_integral_sample *n_var0);
void callback_magOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_magnetometer_sample *n_var0);
void callback_lidarliteOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_lidarlite_sample *n_var0);
void callback_baroOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_barometer_sample *n_var0);
void callback_accelOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_accelerometer_sample *n_var0);
void callback_gyroOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_gyroscope_sample *n_var0);
void callback_sensorsOutputGetRespProducer_thread_period_1ms(const struct sequence_numbered_sensors_result *n_var0);
void callback_userInputGetRespProducer_thread_period_1ms(const struct sequence_numbered_user_input_result *n_var0);
void callback_rcInputGetRespProducer_thread_period_1ms(const struct sequence_numbered_rc_input *n_var0);
void callback_controlLawGetRespProducer_thread_period_1ms(const struct sequence_numbered_control_law *n_var0);
void callback_packedStatusGetRespProducer_thread_period_1ms(const struct sequence_numbered_packed_status *n_var0);
void callback_cameraTargetInputGetRespProducer_thread_period_1ms(const struct sequence_numbered_camera_target *n_var0);
void callback_rgbLedGetRespProducer_thread_period_1ms(const struct sequence_numbered_rgb_led_setting *n_var0);
void callback_rgbLedSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_userInputRequestGetRespProducer_thread_period_1ms(const struct sequence_numbered_user_input *n_var0);
void callback_userInputRequestSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_controlModesRequestGetRespProducer_thread_period_1ms(const struct sequence_numbered_control_modes *n_var0);
void callback_controlModesRequestSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_armingRequestGetRespProducer_thread_period_1ms(const struct sequence_numbered_tristate *n_var0);
void callback_armingRequestSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_yawPositionPidGetRespProducer_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_yawPositionPidSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_yawRatePidGetRespProducer_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_yawRatePidSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_attitudePitchStabGetRespProducer_thread_period_1ms(const struct sequence_numbered_stab_config *n_var0);
void callback_attitudePitchStabSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_attitudeRollStabGetRespProducer_thread_period_1ms(const struct sequence_numbered_stab_config *n_var0);
void callback_attitudeRollStabSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_throttleUiGetRespProducer_thread_period_1ms(const struct sequence_numbered_throttle_ui *n_var0);
void callback_throttleUiSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_altitudePositionPidGetRespProducer_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_altitudePositionPidSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_altitudeRatePidGetRespProducer_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_altitudeRatePidSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_nominalThrottleGetRespProducer_thread_period_1ms(const struct sequence_numbered_float *n_var0);
void callback_nominalThrottleSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_rebootReqSetRespProducer_thread_period_1ms(const uint32_t *n_var0);
void callback_battery_voltage_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_arming_status_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_px4io_state_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_alt_control_debug_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_att_control_debug_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_motor_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_control_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_control_setpoint_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_gps_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_px4flow_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_px4flow_output_attr_update_thread_period_1ms(const struct px4flow_sample *n_var0);
void callback_px4flow_int_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_mag_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_mag_output_attr_update_thread_period_1ms(const struct magnetometer_sample *n_var0);
void callback_lidarlite_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_lidarlite_output_attr_update_thread_period_1ms(const struct lidarlite_sample *n_var0);
void callback_baro_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_baro_output_attr_update_thread_period_1ms(const struct barometer_sample *n_var0);
void callback_accel_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_accel_output_attr_update_thread_period_1ms(const struct accelerometer_sample *n_var0);
void callback_gyro_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_gyro_output_attr_update_thread_period_1ms(const struct gyroscope_sample *n_var0);
void callback_sensors_output_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_sensors_output_attr_update_thread_period_1ms(const struct sensors_result *n_var0);
void callback_user_input_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_rc_input_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_control_law_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_packed_status_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_camera_target_input_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_rgb_led_attrSet_thread_period_1ms(const struct sequence_numbered_rgb_led_setting *n_var0);
void callback_rgb_led_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_rgb_led_attr_update_thread_period_1ms(const struct rgb_led_setting *n_var0);
void callback_user_input_request_attrSet_thread_period_1ms(const struct sequence_numbered_user_input *n_var0);
void callback_user_input_request_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_user_input_request_attr_update_thread_period_1ms(const struct user_input *n_var0);
void callback_control_modes_request_attrSet_thread_period_1ms(const struct sequence_numbered_control_modes *n_var0);
void callback_control_modes_request_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_control_modes_request_attr_update_thread_period_1ms(const struct control_modes *n_var0);
void callback_arming_request_attrSet_thread_period_1ms(const struct sequence_numbered_tristate *n_var0);
void callback_arming_request_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_arming_request_attr_update_thread_period_1ms(const uint8_t *n_var0);
void callback_yaw_position_pid_attrSet_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_yaw_position_pid_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_yaw_position_pid_attr_update_thread_period_1ms(const struct pid_config *n_var0);
void callback_yaw_rate_pid_attrSet_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_yaw_rate_pid_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_yaw_rate_pid_attr_update_thread_period_1ms(const struct pid_config *n_var0);
void callback_attitude_pitch_stab_attrSet_thread_period_1ms(const struct sequence_numbered_stab_config *n_var0);
void callback_attitude_pitch_stab_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_attitude_pitch_stab_attr_update_thread_period_1ms(const struct stab_config *n_var0);
void callback_attitude_roll_stab_attrSet_thread_period_1ms(const struct sequence_numbered_stab_config *n_var0);
void callback_attitude_roll_stab_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_attitude_roll_stab_attr_update_thread_period_1ms(const struct stab_config *n_var0);
void callback_throttle_ui_attrSet_thread_period_1ms(const struct sequence_numbered_throttle_ui *n_var0);
void callback_throttle_ui_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_throttle_ui_attr_update_thread_period_1ms(const struct throttle_ui *n_var0);
void callback_altitude_position_pid_attrSet_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_altitude_position_pid_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_altitude_position_pid_attr_update_thread_period_1ms(const struct pid_config *n_var0);
void callback_altitude_rate_pid_attrSet_thread_period_1ms(const struct sequence_numbered_pid_config *n_var0);
void callback_altitude_rate_pid_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_altitude_rate_pid_attr_update_thread_period_1ms(const struct pid_config *n_var0);
void callback_nominal_throttle_attrSet_thread_period_1ms(const struct sequence_numbered_float *n_var0);
void callback_nominal_throttle_attrGet_thread_period_1ms(const uint32_t *n_var0);
void callback_nominal_throttle_attr_update_thread_period_1ms(const float *n_var0);
void callback_reboot_req_attrSet_thread_period_1ms(const struct sequence_numbered_reboot_req *n_var0);
void callback_parse_frame_thread_period_1ms(const uint8_t n_var0[80U]);
void callback_abort_thread_period_1ms(const bool *n_var0);
void callback_request_thread_period_1ms(const struct can_message *n_var0);

#ifdef __cplusplus
}
#endif
#endif /* __TOWER_USER_THREAD_PERIOD_1MS_H__ */
