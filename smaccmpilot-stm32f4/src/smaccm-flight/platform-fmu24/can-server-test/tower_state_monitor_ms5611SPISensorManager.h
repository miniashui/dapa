/* This file has been autogenerated by Ivory
 * Compiler version  0.1.0.5
 */
#ifndef __TOWER_STATE_MONITOR_MS5611SPISENSORMANAGER_H__
#define __TOWER_STATE_MONITOR_MS5611SPISENSORMANAGER_H__
#ifdef __cplusplus
extern "C" {
#endif
#include "ivory.h"
#include "canDriverTypes.h"
#include "heartbeat_types.h"
#include "time_micros_types.h"
#include "arming_mode_types.h"
#include "sequence_numbered_packed_status_types.h"
#include "sequence_num_types.h"
#include "packed_status_types.h"
#include "gps_fix_types.h"
#include "tristate_types.h"
#include "control_modes_types.h"
#include "control_source_types.h"
#include "yaw_mode_types.h"
#include "throttle_mode_types.h"
#include "sequence_numbered_control_law_types.h"
#include "control_law_types.h"
#include "sequence_numbered_rc_input_types.h"
#include "rc_input_types.h"
#include "sequence_numbered_user_input_result_types.h"
#include "user_input_result_types.h"
#include "user_input_types.h"
#include "sequence_numbered_sensors_result_types.h"
#include "sensors_result_types.h"
#include "xyz_types.h"
#include "quaternion_types.h"
#include "sequence_numbered_gyroscope_sample_types.h"
#include "gyroscope_sample_types.h"
#include "sequence_numbered_accelerometer_sample_types.h"
#include "accelerometer_sample_types.h"
#include "sequence_numbered_barometer_sample_types.h"
#include "barometer_sample_types.h"
#include "sequence_numbered_lidarlite_sample_types.h"
#include "lidarlite_sample_types.h"
#include "sequence_numbered_magnetometer_sample_types.h"
#include "magnetometer_sample_types.h"
#include "sequence_numbered_px4flow_integral_sample_types.h"
#include "px4flow_integral_sample_types.h"
#include "sequence_numbered_px4flow_sample_types.h"
#include "px4flow_sample_types.h"
#include "sequence_numbered_position_sample_types.h"
#include "position_sample_types.h"
#include "sequence_numbered_control_setpoint_types.h"
#include "control_setpoint_types.h"
#include "sequence_numbered_control_output_types.h"
#include "control_output_types.h"
#include "sequence_numbered_quadcopter_motors_types.h"
#include "quadcopter_motors_types.h"
#include "sequence_numbered_att_control_debug_types.h"
#include "att_control_debug_types.h"
#include "pid_state_types.h"
#include "sequence_numbered_alt_control_debug_types.h"
#include "alt_control_debug_types.h"
#include "sequence_numbered_px4io_state_types.h"
#include "px4io_state_types.h"
#include "px4io_status_types.h"
#include "px4io_alarms_types.h"
#include "sequence_numbered_arming_status_types.h"
#include "arming_status_types.h"
#include "sequence_numbered_float_types.h"
#include "sequence_numbered_pid_config_types.h"
#include "pid_config_types.h"
#include "sequence_numbered_throttle_ui_types.h"
#include "throttle_ui_types.h"
#include "sequence_numbered_stab_config_types.h"
#include "stab_config_types.h"
#include "sequence_numbered_tristate_types.h"
#include "sequence_numbered_control_modes_types.h"
#include "sequence_numbered_user_input_types.h"
#include "sequence_numbered_rgb_led_setting_types.h"
#include "rgb_led_setting_types.h"
#include "sequence_numbered_camera_target_types.h"
#include "camera_target_types.h"
#include "sequence_numbered_reboot_req_types.h"
#include "reboot_req_types.h"
#include "reboot_magic_types.h"
#include "ivory_serialize.h"
#include "gps_common.h"
#include "spiDriverTypes.h"
#include "mpu6000_response_types.h"
#include "ms5611_types.h"
#include "i2cTowerTypes.h"
#include "attitude_filter.h"
typedef struct ms5611_continuation {
            uint32_t state;
            struct spi_transaction_result r0;
            uint8_t deref1;
            struct spi_transaction_result r2;
            uint8_t deref3;
            int32_t ix4;
            struct spi_transaction_request local12;
            struct spi_transaction_result r14;
            uint8_t deref15;
            struct spi_transaction_result r16;
            uint8_t deref17;
            uint8_t deref18;
            uint8_t deref19;
            uint8_t deref20;
            uint32_t let21;
            struct spi_transaction_request local22;
            struct spi_transaction_result r24;
            uint8_t deref25;
            struct spi_transaction_result r26;
            uint8_t deref27;
            uint8_t deref28;
            uint8_t deref29;
            uint8_t deref30;
            uint32_t let31;
            int64_t r32;
            uint16_t deref33;
            uint16_t deref34;
            uint16_t deref35;
            uint16_t deref36;
            uint16_t deref37;
            uint16_t deref38;
            uint32_t deref39;
            uint32_t deref40;
            int32_t let41;
            int32_t let42;
            int64_t let43;
            int64_t let44;
            int32_t let45;
            int64_t deref46;
            struct spi_transaction_request local5;
            struct spi_transaction_result r7;
            uint8_t deref8;
            uint8_t deref9;
            uint8_t deref10;
            uint16_t let11;
        } ms5611_continuation;
extern struct ms5611_sample sample;
extern struct ms5611_calibration calibration;
extern struct barometer_sample measurement;
extern uint32_t continuationMode;
extern struct spi_transaction_result last_value_4;
extern struct ms5611_continuation ms5611_cont;

#ifdef __cplusplus
}
#endif
#endif /* __TOWER_STATE_MONITOR_MS5611SPISENSORMANAGER_H__ */
