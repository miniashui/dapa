/* This file has been autogenerated by Ivory
 * Compiler version  0.1.0.5
 */
#ifndef __TOWER_GEN_THREAD_INIT_H__
#define __TOWER_GEN_THREAD_INIT_H__
#ifdef __cplusplus
extern "C" {
#endif
#include "ivory.h"
#include "canDriverTypes.h"
#include "heartbeat_types.h"
#include "time_micros_types.h"
#include "arming_mode_types.h"
#include "sequence_numbered_packed_status_types.h"
#include "sequence_num_types.h"
#include "packed_status_types.h"
#include "gps_fix_types.h"
#include "tristate_types.h"
#include "control_modes_types.h"
#include "control_source_types.h"
#include "yaw_mode_types.h"
#include "throttle_mode_types.h"
#include "sequence_numbered_control_law_types.h"
#include "control_law_types.h"
#include "sequence_numbered_rc_input_types.h"
#include "rc_input_types.h"
#include "sequence_numbered_user_input_result_types.h"
#include "user_input_result_types.h"
#include "user_input_types.h"
#include "sequence_numbered_sensors_result_types.h"
#include "sensors_result_types.h"
#include "xyz_types.h"
#include "quaternion_types.h"
#include "sequence_numbered_gyroscope_sample_types.h"
#include "gyroscope_sample_types.h"
#include "sequence_numbered_accelerometer_sample_types.h"
#include "accelerometer_sample_types.h"
#include "sequence_numbered_barometer_sample_types.h"
#include "barometer_sample_types.h"
#include "sequence_numbered_lidarlite_sample_types.h"
#include "lidarlite_sample_types.h"
#include "sequence_numbered_magnetometer_sample_types.h"
#include "magnetometer_sample_types.h"
#include "sequence_numbered_px4flow_integral_sample_types.h"
#include "px4flow_integral_sample_types.h"
#include "sequence_numbered_px4flow_sample_types.h"
#include "px4flow_sample_types.h"
#include "sequence_numbered_position_sample_types.h"
#include "position_sample_types.h"
#include "sequence_numbered_control_setpoint_types.h"
#include "control_setpoint_types.h"
#include "sequence_numbered_control_output_types.h"
#include "control_output_types.h"
#include "sequence_numbered_quadcopter_motors_types.h"
#include "quadcopter_motors_types.h"
#include "sequence_numbered_att_control_debug_types.h"
#include "att_control_debug_types.h"
#include "pid_state_types.h"
#include "sequence_numbered_alt_control_debug_types.h"
#include "alt_control_debug_types.h"
#include "sequence_numbered_px4io_state_types.h"
#include "px4io_state_types.h"
#include "px4io_status_types.h"
#include "px4io_alarms_types.h"
#include "sequence_numbered_arming_status_types.h"
#include "arming_status_types.h"
#include "sequence_numbered_float_types.h"
#include "sequence_numbered_pid_config_types.h"
#include "pid_config_types.h"
#include "sequence_numbered_throttle_ui_types.h"
#include "throttle_ui_types.h"
#include "sequence_numbered_stab_config_types.h"
#include "stab_config_types.h"
#include "sequence_numbered_tristate_types.h"
#include "sequence_numbered_control_modes_types.h"
#include "sequence_numbered_user_input_types.h"
#include "sequence_numbered_rgb_led_setting_types.h"
#include "rgb_led_setting_types.h"
#include "sequence_numbered_camera_target_types.h"
#include "camera_target_types.h"
#include "sequence_numbered_reboot_req_types.h"
#include "reboot_req_types.h"
#include "reboot_magic_types.h"
#include "ivory_serialize.h"
#include "gps_common.h"
#include "spiDriverTypes.h"
#include "mpu6000_response_types.h"
#include "ms5611_types.h"
#include "i2cTowerTypes.h"
#include "attitude_filter.h"
#include "tower_user_thread_init.h"
#include "tower_gen_monitor_can1PeripheralDriver.h"
#include "tower_gen_monitor_can_init.h"
#include "tower_gen_monitor_ubloxGPS.h"
#include "tower_gen_monitor_gps_output_attrProxy.h"
#include "tower_gen_monitor_gps_output_attrServer.h"
#include "tower_gen_monitor_spi1PeripheralDriver.h"
#include "tower_gen_monitor_sensor_enable.h"
#include "tower_gen_monitor_l3gd20Ctl.h"
#include "tower_gen_monitor_spi1_scheduler.h"
#include "tower_gen_monitor_mpu6kCtl.h"
#include "tower_gen_monitor_detectMotion.h"
#include "tower_gen_monitor_gyro_output_attrProxy.h"
#include "tower_gen_monitor_gyro_output_attrServer.h"
#include "tower_gen_monitor_att_est_sensor_fusion.h"
#include "tower_gen_monitor_sensor_fusion_proxy.h"
#include "tower_gen_monitor_sensors_output_attrServer.h"
#include "tower_gen_monitor_motion_light_debug.h"
#include "tower_gen_monitor_rgb_led_attrServer.h"
#include "tower_gen_monitor_rgbled.h"
#include "tower_gen_monitor_i2c2PeripheralDriver.h"
#include "tower_gen_monitor_accel_output_attrProxy.h"
#include "tower_gen_monitor_accel_output_attrServer.h"
#include "tower_gen_monitor_lsm303dSensorManager.h"
#include "tower_gen_monitor_mag_output_attrProxy.h"
#include "tower_gen_monitor_mag_output_attrServer.h"
#include "tower_gen_monitor_ms5611SPISensorManager.h"
#include "tower_gen_monitor_baro_output_attrProxy.h"
#include "tower_gen_monitor_baro_output_attrServer.h"
#include "tower_gen_monitor_i2c1PeripheralDriver.h"
#include "tower_gen_monitor_uart_dma.h"
#include <freertos_time_wrapper.h>
void loop_thread_init(void);
void emitter_set_chan_190_thread_init_emit(const struct i2c_transaction_request *n_var0);
void emitter_i2c2_request_chan_191_thread_init_emit(const struct i2c_transaction_result *n_var0);
void emitter_dmauart_hw_init_chan_151_thread_init_emit(const int64_t *n_var0);
void emitter_new_state_chan_29_thread_init_emit(const struct sensors_result *n_var0);
void emitter_att_est_gyro_chan_189_thread_init_emit(const struct AhrsMlkf *n_var0);
void emitter_att_est_mag_chan_189_thread_init_emit(const struct AhrsMlkf *n_var0);
void emitter_att_est_accel_chan_189_thread_init_emit(const struct AhrsMlkf *n_var0);
void emitter_write_mag_output_attr_chan_34_thread_init_emit(const struct magnetometer_sample *n_var0);
void emitter_write_gyro_output_attr_chan_30_thread_init_emit(const struct gyroscope_sample *n_var0);
void emitter_write_baro_output_attr_chan_32_thread_init_emit(const struct barometer_sample *n_var0);
void emitter_write_accel_output_attr_chan_31_thread_init_emit(const struct accelerometer_sample *n_var0);
void emitter_motion_light_debug_2_chan_23_thread_init_emit(const struct rgb_led_setting *n_var0);
void emitter_detectMotion_2_accel_chan_188_thread_init_emit(const bool *n_var0);
void emitter_spi1_scheduler_ready_chan_158_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_spi1_scheduler_l3gd20_chan_158_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_spi1_scheduler_ms5611_chan_158_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_spi1_scheduler_lsm303d_chan_158_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_spi1_scheduler_mpu6000_chan_158_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_ms5611_init_chan_178_thread_init_emit(const bool *n_var0);
void emitter_ms5611_chan_175_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_ms5611_chan_177_thread_init_emit(const struct barometer_sample *n_var0);
void emitter_lsm303d_coroutine_init_chan_174_thread_init_emit(const bool *n_var0);
void emitter_lsm303d_coroutine_chan_170_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_lsm303d_coroutine_chan_172_thread_init_emit(const struct magnetometer_sample *n_var0);
void emitter_mpu6000_init_chan_169_thread_init_emit(const bool *n_var0);
void emitter_mpu6000_chan_167_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_mpu6000_chan_157_thread_init_emit(const struct gyroscope_sample *n_var0);
void emitter_mpu6000_chan_156_thread_init_emit(const struct accelerometer_sample *n_var0);
void emitter_l3gd20_init_chan_166_thread_init_emit(const bool *n_var0);
void emitter_l3gd20_chan_164_thread_init_emit(const struct spi_transaction_request *n_var0);
void emitter_l3gd20_chan_162_thread_init_emit(const int64_t *n_var0);
void emitter_init_2_chan_161_thread_init_emit(const int64_t *n_var0);
void emitter_initialize_hardware_chan_160_thread_init_emit(const int64_t *n_var0);
void emitter_write_gps_output_attr_chan_37_thread_init_emit(const struct position_sample *n_var0);
void emitter_ublox_init_chan_147_thread_init_emit(const struct position_sample *n_var0);

#ifdef __cplusplus
}
#endif
#endif /* __TOWER_GEN_THREAD_INIT_H__ */
